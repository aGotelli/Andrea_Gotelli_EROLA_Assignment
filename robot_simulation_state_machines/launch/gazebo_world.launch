<?xml version="1.0"?>
<launch>

  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused"            default="false"/>
  <arg name="use_sim_time"      default="true"/>
  <arg name="extra_gazebo_args" default=""/>
  <arg name="gui"               default="true"/>
  <arg name="recording"         default="false"/>
  <arg name="world"             default="world_assignment" />
  <!-- Note that 'headless' is currently non-functional.  See gazebo_ros_pkgs issue #491 (-r arg does not disable
       rendering, but instead enables recording). The arg definition has been left here to prevent breaking downstream
       launch files, but it does nothing. -->
  <arg name="headless"              default="false"/>
  <arg name="debug"                 default="false"/>
  <arg name="physics"               default="ode"/>
  <arg name="verbose"               default="false"/>
  <arg name="world_name"            value="$(find robot_simulation_description)/worlds/$(arg world).world"/>
  <arg name="respawn_gazebo"        default="false"/>
  <arg name="use_clock_frequency"   default="false"/>
  <arg name="pub_clock_frequency"   default="100"/>

  <!-- set use_sim_time flag -->
  <param name="/use_sim_time" value="$(arg use_sim_time)"/>

  <!-- set command arguments -->
  <arg unless="$(arg paused)"       name="command_arg1"     value=""/>
  <arg     if="$(arg paused)"       name="command_arg1"     value="-u"/>
  <arg unless="$(arg recording)"    name="command_arg2"     value=""/>
  <arg     if="$(arg recording)"    name="command_arg2"     value="-r"/>
  <arg unless="$(arg verbose)"      name="command_arg3"     value=""/>
  <arg     if="$(arg verbose)"      name="command_arg3"     value="--verbose"/>
  <arg unless="$(arg debug)"        name="script_type"      value="gzserver"/>
  <arg     if="$(arg debug)"        name="script_type"      value="debug"/>

  <!-- start gazebo server-->
  <group if="$(arg use_clock_frequency)">
    <param name="gazebo/pub_clock_frequency" value="$(arg pub_clock_frequency)" />
  </group>
  <node name="gazebo" pkg="gazebo_ros" type="$(arg script_type)" respawn="$(arg respawn_gazebo)" output="screen"
	args="$(arg command_arg1) $(arg command_arg2) $(arg command_arg3) -e $(arg physics) $(arg extra_gazebo_args) $(arg world_name)" />
	
  <!-- start gazebo client -->
  <group if="$(arg gui)">
    <node name="gazebo_gui" pkg="gazebo_ros" type="gzclient" respawn="false" output="screen"/>
  </group>

  <group ns="human">
    <param name="human_description1" textfile="$(find robot_simulation_description)/urdf/human.urdf" />
    <node name="urdf_spawner_human1" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
          args="-urdf -model human1 -param human_description1 -x -7 -y 7 -z 0.34 -R 0 -P 0 -Y 0"/>
  </group>


  <group ns="robot">
        <param name="robot_description"
                command="$(find xacro)/xacro --inorder $(find robot_simulation_description)/urdf/robot.xacro" />
  	<node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
                args="-urdf -model robot -param robot_description -x -5 -y 7 -Y 3.14 -z 0.05"/>
        <node pkg="robot_simulation_state_machines" type="move_robot.py" name="move_robot" output="screen" />
        <!-- Launch the node for the state machine, which controls the robot behaviors  -->
        <node pkg="robot_simulation_state_machines" type="robot_behaviors.py" name="robot_behaviors"  output="screen"/>

        <rosparam file="$(find robot_simulation_description)/config/motors_config.yaml" command="load" />

        <node name="controller_spawner" pkg="controller_manager" type="spawner" output="screen"
                args="joint_state_controller joint_neck_position_controller --shutdown-timeout 3">
        </node>
  </group>
  
  <group ns="ball">
        <param name="ball_description"
                command="$(find xacro)/xacro --inorder $(find robot_simulation_description)/urdf/ball.xacro" />
  	<node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
                args="-urdf -model ball -param ball_description -x 0 -y 0 -z -1"/>
        <node name="move_ball" pkg="robot_simulation_state_machines" type="move_ball.py" output="screen" />
        <node name="ball_behaviors" pkg="robot_simulation_state_machines" type="ball_behaviors.py" output="screen" />
  </group>

</launch>
